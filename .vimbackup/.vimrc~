call pathogen#infect()
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
let g:neocomplcache_enable_at_startup = 1
filetype indent plugin on
"set ofu=syntaxcomplete#Complete
"syntax on
"syntax sync fromstart

"default settings: default editor behaviour"

"speeding things up by disabling matching parenthesis"
let g:loaded_matchparen = 1
set conceallevel=0
set nocompatible "usefull for lots of cool plugins"
set smartindent
set autoindent "auto indent"
set tabstop=4
set shiftwidth=4
set expandtab
"set showmatch
set backupdir=.vimbackup
set history=1000
set ruler "Always show current position"
set nu "enables line numbers "
set foldmethod=indent   "fold based on indent "
set foldnestmax=10      "deepest fold is 10 levels"
set nofoldenable        "dont fold by default"
set foldlevel=1         "this is just what i use"
set hlsearch "highlight search"
set completeopt=menu,menuone,longest,preview "offer completion with a menu"
set encoding=utf-8 "default encoding"
set list listchars=nbsp:·,tab:»·,trail:¬,extends:> "that awesome looking trail"
set undofile "we like the undo file"
set undodir=.vimbackup

" the default was just horrid, not that this is any better. "
colorscheme icansee

" Custom status line || using a plugin instead. "
set laststatus=2 "required to enable the status line"

" custom aliases, universally shared "
nnoremap <F6> :setlocal foldmethod=manual<CR>
nnoremap <F7> :IndentGuidesToggle<CR>
nnoremap <F8> :TagbarToggle<CR>
nnoremap <F9> :NERDTreeToggle<CR>

"vim-latex"
let g:Imap_UsePlaceHolders = 0
set backspace +=start

"bracket completion"
inoremap _( ()<Esc>:call BC_AddChar(")")<CR>i
inoremap _{ {<CR>}<Esc>:call BC_AddChar("}")<CR><Esc>kA<CR>
inoremap _[ []<Esc>:call BC_AddChar("]")<CR>i
inoremap _" ""<Esc>:call BC_AddChar("\"")<CR>i
" jump out of parenthesis
inoremap <C-j> <Esc>:call search(BC_GetChar(), "W")<CR>a

function! BC_AddChar(schar)
 if exists("b:robstack")
 let b:robstack = b:robstack . a:schar
 else
 let b:robstack = a:schar
 endif
endfunction

function! BC_GetChar()
 let l:char = b:robstack[strlen(b:robstack)-1]
 let b:robstack = strpart(b:robstack, 0, strlen(b:robstack)-1)
 return l:char
endfunction
